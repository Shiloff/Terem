@model GetContactsResult
@using Project.WebUI.HtmlHelpers
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_LayoutInspinia.cshtml";
    Func<MvcHtmlString> pageLinks = () => Html.PageLinks(Model.PagingInfo,
    k => Url.Action(Model.Action, new
    {
        page = k,
        sexId = Model.SelectedFilters.SexId,
        alcoholId = Model.SelectedFilters.AlcoholId,
        animalId = Model.SelectedFilters.AnimalId,
        activityId = Model.SelectedFilters.ActivityId,
        smokeId = Model.SelectedFilters.SmokeId
    }));
}
<div class="row wrapper border-bottom white-bg page-heading">
    <div class="col-lg-10">
        <h2>@(Model.Action == "Index" ? "Контакты" : "Поиск контактов")</h2>
        @Html.MvcSiteMap().SiteMapPath()
    </div>
</div>

<div class="wrapper wrapper-content ">
    <input type="button" class="btn btn-primary btn-block" value="Фильтры" style="margin-bottom: 20px;" data-toggle="modal" data-target="#profileFilterModal" />

    @pageLinks()
    <div class="row">
        <div class="col-lg-4">
            @for (var i = 0; i < Model.Profiles.Count(); i += 3)
            {
                @Html.Partial("_FindProfile", Model.Profiles[i])
            }
        </div>
        <div class="col-lg-4">
            @for (var i = 1; i < Model.Profiles.Count(); i += 3)
            {
                @Html.Partial("_FindProfile", Model.Profiles[i])
            }
        </div>
        <div class="col-lg-4">
            @for (var i = 2; i < Model.Profiles.Count(); i += 3)
            {
                @Html.Partial("_FindProfile", Model.Profiles[i])
            }
        </div>
    </div>
    @pageLinks()
</div>

@Html.Partial("_ModalFilter")
<script>
    function SubmitForm(pForm) {
        var filters = [];
        var elems = pForm.getElementsByTagName('input');
        for (var i = 0; i < elems.length; i++) {
            if (elems[i].type === "submit") {
                continue;
            }
            if (elems[i].value !== "" && elems[i].name !== "") {
                filters.push(encodeURIComponent(elems[i].name) + "=" + encodeURIComponent(elems[i].value));
            }
        }
        var elems2 = pForm.getElementsByTagName('select');
        for (var i = 0; i < elems2.length; i++) {
            if (!elems2[i].multiple) {
                if (elems2[i].name !== "" && elems2[i].value !== "") {
                    filters.push(encodeURIComponent(elems2[i].name) + "=" + encodeURIComponent(elems2[i].value));
                }
            } else {
                for (var j = 0; j < elems2[i].selectedOptions.length; j++) {
                    if (elems2[i].name !== "" && elems2[i].selectedOptions[j].value !== "" && elems2[i].selectedOptions[j].selected) {
                        filters.push(encodeURIComponent(elems2[i].name) + "=" + encodeURIComponent(elems2[i].selectedOptions[j].value));
                    }
                }
            }
        }
        window.location = pForm.action + "?" + filters.join("&");
        return false;
    }
</script>


@section Styles{
    @Styles.Render("~/Content/plugins/chosen/chosenStyles")
}
@section Scripts{
    @Scripts.Render("~/plugins/chosen")
    <script>
        $(document).ready(function() {
            $(".chosen-select").chosen({ width: "100%" });
        });
    </script>
}